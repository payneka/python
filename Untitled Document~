Numpy / psipy class

Numpy provides math / practical information and functions

Numpy arrays: 
	-closer to "machine code", more efficient. 
	-Can't mix floating points, etc (types)
	
Annaconda: 
	-Pyton distrobution you should be using. 
	-comes with all scientific packages you'd ever need
	-mini-conda is smaller, install as you go. 
	-helps keep packages up to date, package prerequisits, etc. 

IDE reccomendations :
	-Spider is okay, I use Atom (allows to download functionalty as needed)
	-ipython is good: 
		-allows error checking, indentation, command history, etc. 

>>> a = np.arange(10000)
>>> L = range(10000)
>>> a**2
array([       0,        1,        4, ..., 99940009, 99960004, 99980001])
>>> a.ndim
1
>>> a.shape
(10000,)
>>> len(a)
10000
>>> b = np.array([[1,2,3,],[1,2,3]])
>>> b
array([[1, 2, 3],
       [1, 2, 3]])
>>> b.shape
(2, 3)
>>> np.arange(10)
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> np.arange(1,9,2) #list from 1-9 in increments of 2
array([1, 3, 5, 7])

>>> >>> np.eye(5) 
array([[ 1.,  0.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.,  0.],
       [ 0.,  0.,  1.,  0.,  0.],
       [ 0.,  0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  0.,  1.]])
>>> 

MATPLOTLIB:
>>> import matplotlib.pyplot as plt
>>> x = [1,2,3,4]
>>> y = [4,5,6,7]
>>> plt.plot(x,y)
[<matplotlib.lines.Line2D object at 0xb3c8920c>]
>>> plt.show()
>>> plt.plot(x,y,'o')
[<matplotlib.lines.Line2D object at 0xb39d626c>]
>>> plt.show
<function show at 0xb4190224>
>>> plt.show()
>>> 

Accessing Indices: 
b = [1,2]
x[b] returns spots 1 and 2

Element by element operations
>>> b = np.array([[1,2,3,],[1,2,3]])
>>> b**2
array([[1, 4, 9],
       [1, 4, 9]])
>>> b*2
array([[2, 4, 6],
       [2, 4, 6]])
>>> 
>>> np.exp(a)
array([  2.71828183,   7.3890561 ,  20.08553692])
>>> np.log(a)
array([ 0.        ,  0.69314718,  1.09861229])
>>> 

Array comparison: 
>>> a = np.array([1,2,3])
>>> b = np.array([1,3,4])
>>> a>b
array([False, False, False], dtype=bool)
>>> a == b
array([ True, False, False], dtype=bool)
>>> all(a==b)
False
>>> np.allclose(a,b) #looks at if 2 numbers are very close (default 10e-5)
False
>>> 

Reductions opperations:
>>> np.sum(a)
6 
>>> x = np.array([[1,2,3],[4,5,6]])
>>> x.sum(axis=1)
array([ 6, 15])

>>> np.sort(a)
array([1, 2, 3])
>>> 

Polynomials:
>>> p = np.poly1d([3,2,-1])
>>> p
poly1d([ 3,  2, -1]) 
>>> p(0)
-1
>>> 
>>> np.polyder(p) #derivative
poly1d([6, 2])
>>> 

-------SCI.PY---------

Optimizations: 
optimize.fmin_bfgs(f,0) #finds the global minimum of some function (f) with initial guess (0)

optimize.basinhopping(f,0) #a more robust version of above, guess doesn't need to be as close

Data:
xdata = np.linspace(-10,10,num=20) #20 numbers equally spaced between -10,10
ydata = f(xdata) + np.random.randn(xdata.size) #eval xdata w/ fnc, adding some noise

Curve fitting: 
def f2(x,a,b):
	return a*x**2 +b*npsin(x)

guess = [2,2]
params, params_covar = optimize.curve_fit(f2,xdata,ydata,guess)
#returns curve fit





